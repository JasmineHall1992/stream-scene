name: Deploy to Personal Server

on:
  schedule:
    - cron: '0 * * * *'  # Check every 5 minutes
  push:
    branches: [ main ]  # Deploy from your main branch too
  workflow_dispatch: # Allow manual trigger

jobs:
  check-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to compare with upstream
        
    - name: Add upstream remote
      run: |
        git remote add upstream https://github.com/Project-Visi0n/stream-scene.git || true
        git fetch upstream
        
    - name: Check for upstream changes
      id: check_changes
      run: |
        # Get the latest commit hash from upstream main
        UPSTREAM_HASH=$(git rev-parse upstream/main)
        
        # Get the latest commit hash from our main branch
        LOCAL_HASH=$(git rev-parse origin/main)
        
        echo "Upstream main: $UPSTREAM_HASH"
        echo "Local main: $LOCAL_HASH"
        
        if [ "$UPSTREAM_HASH" != "$LOCAL_HASH" ]; then
          echo "Changes detected in upstream!"
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          
          # Merge upstream changes
          git checkout main
          git merge upstream/main --no-edit
          git push origin main
        else
          echo "No new changes in upstream"
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Setup Node.js
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Clean install dependencies
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        rm -rf node_modules
        npm ci
      
    - name: Build application
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      env:
        REACT_APP_API_URL: https://streamscene.net
      run: |
        npm run build
        
    - name: Create deployment package
      run: |
        # Create a deployment directory
        mkdir -p deploy
        
        # Copy built files
        cp -r dist/ deploy/
        cp -r public/ deploy/
        
        # Copy configuration files
        cp ecosystem.config.cjs deploy/
        cp package-server.json deploy/package.json
        
        # Create production environment file (will override any existing .env)
        cat > deploy/.env << EOF
        NODE_ENV=production
        PORT=8000
        CLIENT_URL=https://streamscene.net
        REACT_APP_API_URL=https://streamscene.net
        BASE_URL=https://streamscene.net
        SESSION_SECRET=${{ secrets.SESSION_SECRET }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_CALLBACK_URL=https://streamscene.net/auth/google/callback
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
        THREADS_CLIENT_ID=${{ secrets.THREADS_CLIENT_ID }}
        THREADS_CLIENT_SECRET=${{ secrets.THREADS_CLIENT_SECRET }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        DB_HOST=localhost
        DB_NAME=stream_scene_db
        DB_USER=root
        DB_PASS=StreamRoot2024!
        ENABLE_MONITORING=true
        LOG_LEVEL=error
        DB_PASS=StreamRoot2024!
        EOF

    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 60s
        command_timeout: 5m
        debug: true
        script: |
          echo "SSH connection successful!"
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Server time: $(date)"
          echo "Server uptime: $(uptime)"

    - name: Setup server directory
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 120s
        command_timeout: 10m
        debug: true
        script: |
          # Create app directory if it doesn't exist
          sudo mkdir -p /var/www/stream-scene
          sudo chown $USER:$USER /var/www/stream-scene
          
          # Install PM2 globally if not installed
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2..."
            sudo npm install -g pm2
          else
            echo "PM2 already installed: $(pm2 --version)"
          fi
          
          # Create logs directory
          mkdir -p /var/www/stream-scene/logs
          echo "Setup completed successfully"

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 300s
        source: "deploy/*"
        target: "/var/www/stream-scene/"
        strip_components: 1
        
    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 180s
        command_timeout: 15m
        debug: true
        script: |
          cd /var/www/stream-scene
          
          echo "Installing production dependencies..."
          npm install --production
          
          echo "Stopping existing PM2 processes..."
          pm2 stop stream-scene || echo "No existing process to stop"
          pm2 delete stream-scene || echo "No existing process to delete"
          
          echo "Starting with PM2 using ecosystem config..."
          pm2 start ecosystem.config.cjs --env production
          pm2 save
          
          echo "Deployment completed successfully!"
          pm2 status
