name: Deploy to Personal Server

on:
  push:
    branches: [ deployment-strikes-back-revenge-of-the-dist ]  # Deploy from your branch
  workflow_dispatch: # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Clean install dependencies
      run: |
        rm -rf node_modules
        npm ci
      
    - name: Build application
      run: |
        npm run build
        
    - name: Create deployment package
      run: |
        # Create a deployment directory
        mkdir -p deploy
        
        # Copy built files
        cp -r dist/ deploy/
        cp -r public/ deploy/
        
        # Copy configuration files
        cp ecosystem.config.cjs deploy/
        cp package-server.json deploy/package.json
        
        # Create environment file template (will be populated with secrets)
        cat > deploy/.env << EOF
        PORT=8000
        CLIENT_URL=http://streamscene.net:8000
        REACT_APP_API_URL=http://streamscene.net:8000
        SESSION_SECRET=${{ secrets.SESSION_SECRET }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_CALLBACK_URL=http://streamscene.net:8000/auth/google/callback
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
        DB_HOST=localhost
        DB_NAME=stream_scene_db
        DB_USER=root
        DB_PASS=StreamRoot2024!
        EOF

    - name: Setup server directory
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # Create app directory if it doesn't exist
          sudo mkdir -p /var/www/stream-scene
          sudo chown $USER:$USER /var/www/stream-scene
          
          # Install PM2 globally if not installed
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          # Create logs directory
          mkdir -p /var/www/stream-scene/logs

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        source: "deploy/*"
        target: "/var/www/stream-scene/"
        strip_components: 1
        
    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          cd /var/www/stream-scene
          
          # Install production dependencies
          npm install --production
          
          # Stop existing PM2 process
          pm2 stop stream-scene || true
          pm2 delete stream-scene || true
          
          # Start with PM2 using ecosystem config
          pm2 start ecosystem.config.cjs --env production
          pm2 save
